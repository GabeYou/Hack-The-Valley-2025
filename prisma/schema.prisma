// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  passwordHash  String
  phoneNumber   String
  address       String
  reputation    Int      @default(0)
  walletBalance Int      @default(0)
  createdAt     DateTime @default(now())

  tasksPosted      Task[]             @relation("PostedTasks")
  contributions    TaskContribution[]
  volunteeredTasks TaskVolunteer[]
  transactions     Transaction[]
  badges           UserBadge[]
}

model Task {
  id          String      @id @default(uuid())
  title       String
  description String
  location    String // free-form address or "lat,lng"
  bountyTotal Int         @default(0)
  effortLevel EffortLevel
  status      TaskStatus  @default(open)
  postedById  String
  createdAt   DateTime    @default(now())

  postedBy      User               @relation("PostedTasks", fields: [postedById], references: [id])
  contributions TaskContribution[]
  volunteers    TaskVolunteer[]
  transactions  Transaction[]
}

model TaskContribution {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  amount    Int
  timestamp DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model TaskVolunteer {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  joinedAt  DateTime @default(now())
  completed Boolean  @default(false)
  proofUrl  Bytes?

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id            String          @id @default(uuid())
  userId        String
  type          TransactionType
  amount        Int
  relatedTaskId String?
  timestamp     DateTime        @default(now())

  user        User  @relation(fields: [userId], references: [id])
  relatedTask Task? @relation(fields: [relatedTaskId], references: [id])
}

model Badge {
  id          String      @id @default(uuid())
  name        String
  description String
  users       UserBadge[]
}

model UserBadge {
  id       String   @id @default(uuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  badge Badge @relation(fields: [badgeId], references: [id])
}

enum EffortLevel {
  solo
  team
}

enum TaskStatus {
  open
  in_progress
  in_review
  completed
}

enum TransactionType {
  add_funds // Simulated for now
  withdraw // Disabled for now
  task_reward
  contribution
}
